CREATE TABLE `uc_unicode_blocks` (
`code_point_start` INTEGER PRIMARY KEY NOT NULL,
`code_point_end` INTEGER NOT NULL,
`block_name` TEXT NOT NULL,
`example_char` INTEGER NOT NULL,
`char_count` INTEGER NOT NULL DEFAULT 0
);

CREATE INDEX `uc_unicode_blocks_code_point_end` ON `uc_unicode_blocks`(`code_point_end`);

count:
SELECT COUNT(1)
FROM `uc_unicode_blocks`;

insertBlock:
INSERT OR REPLACE INTO `uc_unicode_blocks`(
    `code_point_start`,
    `code_point_end`,
    `block_name`,
    `example_char`,
    `char_count`
) VALUES(
    :start,
    :end,
    :name,
    :example,
    :count
);

queryAllBlocks:
SELECT *
FROM `uc_unicode_blocks`
WHERE 1;

queryBlockForCodePoint:
SELECT *
FROM `uc_unicode_blocks`
WHERE ? BETWEEN code_point_start AND code_point_end;

queryBlockForStartCodePoint:
SELECT *
FROM `uc_unicode_blocks`
WHERE `code_point_start`=?;

queryBlockCharCountForStartCodePoint:
SELECT `char_count`
FROM `uc_unicode_blocks`
WHERE `code_point_start`=?;

queryBlockPagingWithCollected:
SELECT b.code_point_start, b.code_point_end, b.block_name, b.char_count, b.example_char,
COUNT(c.code_point) AS `collected`, d.category AS `category`, d.cover AS `cover`
FROM `uc_unicode_blocks` AS b
LEFT JOIN uc_unicode_data AS d ON b.example_char=d.code_point
LEFT JOIN `uc_user_cards` AS c ON (c.code_point BETWEEN b.code_point_start AND b.code_point_end)
AND c.card_count
GROUP BY b.code_point_start
LIMIT :limit OFFSET :offset;

clear:
DELETE FROM `uc_unicode_blocks` WHERE 1;